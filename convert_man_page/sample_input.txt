


CVS(1)                                                     CVS(1)


NNAAMMEE
       cvs - Concurrent Versions System

SSYYNNOOPPSSIISS
       ccvvss [ _c_v_s___o_p_t_i_o_n_s ]
              _c_v_s___c_o_m_m_a_n_d [ _c_o_m_m_a_n_d___o_p_t_i_o_n_s ] [ _c_o_m_m_a_n_d___a_r_g_s ]

NNOOTTEE
       This  manpage  is a summary of some of the features of ccvvss
       but for more  in-depth  documentation,  consult  the  Ced-
       erqvist  manual  (as  described in the SEE ALSO section of
       this manpage).

DDEESSCCRRIIPPTTIIOONN
       CVS is a version control system, which allows you to  keep
       old versions of files (usually source code), keep a log of
       who, when, and why changes occurred,  etc.,  like  RCS  or
       SCCS.  Unlike the simpler systems, CVS does not just oper-
       ate on one file at a time or one directory at a time,  but
       operates  on  hierarchical collections of directories con-
       sisting of version controlled files.  CVS helps to  manage
       releases  and  to control the concurrent editing of source
       files among multiple  authors.   CVS  allows  triggers  to
       enable/log/control  various operations and works well over
       a wide area network.

       ccvvss keeps a single copy of the master sources.  This  copy
       is  called  the source ``repository''; it contains all the
       information  to  permit   extracting   previous   software
       releases  at  any time based on either a symbolic revision
       tag, or a date in the past.

EESSSSEENNTTIIAALL CCOOMMMMAANNDDSS
       ccvvss provides a rich variety of  commands  (_c_v_s___c_o_m_m_a_n_d  in
       the  Synopsis),  each  of  which  often  has  a  wealth of
       options, to satisfy the many needs of source management in
       distributed environments.  However, you don't have to mas-
       ter every detail to do useful work with ccvvss; in fact, five
       commands  are  sufficient  to  use (and contribute to) the
       source repository.

       ccvvss cchheecckkoouutt _m_o_d_u_l_e_s...
              A necessary preliminary for most ccvvss work:  creates
              your  private copy of the source for _m_o_d_u_l_e_s (named
              collections of source; you can also use a path rel-
              ative to the source repository here).  You can work
              with this copy  without  interfering  with  others'
              work.   At  least  one subdirectory level is always
              created.

       ccvvss uuppddaattee
              Execute  this  command  from  _w_i_t_h_i_n  your  private
              source  directory  when  you  wish  to  update your
              copies of source  files  from  changes  that  other



                                                                1





CVS(1)                                                     CVS(1)


              developers  have  made to the source in the reposi-
              tory.

       ccvvss aadddd _f_i_l_e...
              Use this command to enroll new files in ccvvss records
              of your working directory.  The files will be added
              to the  repository  the  next  time  you  run  `ccvvss
              ccoommmmiitt'.   Note:  You  should  use the `ccvvss iimmppoorrtt'
              command to bootstrap new sources  into  the  source
              repository.   `ccvvss  aadddd' is only used for new files
              to an already checked-out module.

       ccvvss rreemmoovvee _f_i_l_e...
              Use this command (after erasing any  files  listed)
              to  declare  that  you wish to eliminate files from
              the repository.  The removal does not affect others
              until you run `ccvvss ccoommmmiitt'.

       ccvvss ccoommmmiitt _f_i_l_e...
              Use  this command when you wish to ``publish'' your
              changes to other developers, by incorporating  them
              in the source repository.

OOPPTTIIOONNSS
       The  ccvvss command line can include _c_v_s___o_p_t_i_o_n_s, which apply
       to the overall ccvvss program; a _c_v_s___c_o_m_m_a_n_d, which specifies
       a  particular  action  on  the source repository; and _c_o_m_-
       _m_a_n_d___o_p_t_i_o_n_s and _c_o_m_m_a_n_d___a_r_g_u_m_e_n_t_s to fully  specify  what
       the _c_v_s___c_o_m_m_a_n_d will do.

       _W_a_r_n_i_n_g_:  you must be careful of precisely where you place
       options relative to the _c_v_s___c_o_m_m_a_n_d.  The same option  can
       mean  different  things  depending on whether it is in the
       _c_v_s___o_p_t_i_o_n_s position (to the left of a ccvvss command) or  in
       the  _c_o_m_m_a_n_d___o_p_t_i_o_n_s  position (to the right of a ccvvss com-
       mand).

       There are only two situations where you may omit  _c_v_s___c_o_m_-
       _m_a_n_d: `ccvvss --HH' or `ccvvss ----hheellpp' elicits a list of available
       commands, and `ccvvss --vv' or `ccvvss ----vveerrssiioonn' displays version
       information on ccvvss itself.


CCVVSS OOPPTTIIOONNSS
       As  of release 1.6, ccvvss supports GNU style long options as
       well as short options.  Only a few long options  are  cur-
       rently  supported,  these are listed in brackets after the
       short options whose functions they duplicate.

       Use these options to control the overall ccvvss program:

       --HH [[ ----hheellpp ]]
              Display  usage  information  about  the   specified
              _c_v_s___c_o_m_m_a_n_d   (but  do  not  actually  execute  the



                                                                2





CVS(1)                                                     CVS(1)


              command).  If you don't  specify  a  command  name,
              `ccvvss  --HH'  displays  a  summary of all the commands
              available.

       --QQ     Causes the command to be _r_e_a_l_l_y quiet; the  command
              will generate output only for serious problems.

       --qq     Causes  the  command to be somewhat quiet; informa-
              tional  messages,  such  as  reports  of  recursion
              through subdirectories, are suppressed.

       --bb _b_i_n_d_i_r
              Use  _b_i_n_d_i_r as the directory where RCS programs are
              located (CVS 1.9 and older).  Overrides the setting
              of  the  RCSBIN  environment  variable.  This value
              should be specified as an absolute pathname.

       --dd _C_V_S___r_o_o_t___d_i_r_e_c_t_o_r_y
              Use _C_V_S___r_o_o_t___d_i_r_e_c_t_o_r_y as the root directory  path-
              name  of  the  master source repository.  Overrides
              the setting of the  CVSROOT  environment  variable.
              This value should be specified as an absolute path-
              name.

       --ee _e_d_i_t_o_r
              Use  _e_d_i_t_o_r  to  enter  revision  log  information.
              Overrides the setting of the CVSEDITOR and the EDI-
              TOR environment variables.

       --ff     Do not read the ccvvss startup file (_~_/_._c_v_s_r_c).

       --ll     Do not log the _c_v_s___c_o_m_m_a_n_d in the  command  history
              (but  execute  it  anyway).  See the description of
              the hhiissttoorryy command for information on command his-
              tory.

       --nn     Do  not  change  any files.  Attempt to execute the
              _c_v_s___c_o_m_m_a_n_d, but only  to  issue  reports;  do  not
              remove,  update,  or  merge  any existing files, or
              create any new files.

       --tt     Trace program execution; display  messages  showing
              the  steps  of  ccvvss  activity.  Particularly useful
              with --nn to explore the potential impact of an unfa-
              miliar command.

       --rr     Makes  new working files read-only.  Same effect as
              if the CVSREAD environment variable is set.

       --vv [[ ----vveerrssiioonn ]]
              Displays version and copyright information for ccvvss.

       --ww     Makes   new  working  files  read-write  (default).
              Overrides the setting of  the  CVSREAD  environment



                                                                3





CVS(1)                                                     CVS(1)


              variable.

       --xx     Encrypt  all  communication  between the client and
              the server.  As  of  this  writing,  this  is  only
              implemented when using a Kerberos connection.

       --zz _c_o_m_p_r_e_s_s_i_o_n_-_l_e_v_e_l
              When transferring files across the network use ggzziipp
              with compression level  _c_o_m_p_r_e_s_s_i_o_n_-_l_e_v_e_l  to  com-
              press  and  de-compress  data as it is transferred.
              Requires the presence of the GNU  ggzziipp  program  in
              the current search path at both ends of the link.

UUSSAAGGEE
       Except  when  requesting  general  help with `ccvvss --HH', you
       must specify a _c_v_s___c_o_m_m_a_n_d to ccvvss  to  select  a  specific
       release  control  function  to  perform.  Each ccvvss command
       accepts its own collection of options and arguments.  How-
       ever,  many options are available across several commands.
       You can display a usage summary for each command by speci-
       fying the --HH option with the command.

CCVVSS SSTTAARRTTUUPP FFIILLEE
       Normally,  when  CVS  starts  up, it reads the _._c_v_s_r_c file
       from the home directory of  the  user  reading  it.   This
       startup procedure can be turned off with the --ff flag.

       The  _._c_v_s_r_c  file  lists CVS commands with a list of argu-
       ments, one command per line.  For example,  the  following
       line in _._c_v_s_r_c:

       diff -c

       will  mean  that  the  `ccvvss  ddiiffff'  command will always be
       passed the -c option in addition to any other options that
       are  specified  in  the command line (in this case it will
       have the effect of producing context sensitive  diffs  for
       all executions of `ccvvss ddiiffff' ).

CCVVSS CCOOMMMMAANNDD SSUUMMMMAARRYY
       Here are brief descriptions of all the ccvvss commands:

       aadddd    Add  a  new  file  or  directory to the repository,
              pending a `ccvvss ccoommmmiitt' on the same file.  Can  only
              be  done  from within sources created by a previous
              `ccvvss cchheecckkoouutt' invocation.   Use  `ccvvss  iimmppoorrtt'  to
              place  whole  new  hierarchies of sources under ccvvss
              control.  (Does  not  directly  affect  repository;
              changes working directory.)

       aaddmmiinn  Execute control functions on the source repository.
              (Changes repository directly; uses  working  direc-
              tory without changing it.)




                                                                4





CVS(1)                                                     CVS(1)


       cchheecckkoouutt
              Make  a working directory of source files for edit-
              ing.  (Creates or changes working directory.)

       ccoommmmiitt Apply to the source repository changes,  additions,
              and   deletions   from   your   working  directory.
              (Changes repository.)

       ddiiffff   Show differences between files in working directory
              and  source repository, or between two revisions in
              source repository.  (Does not change either reposi-
              tory or working directory.)

       eexxppoorrtt Prepare  copies  of a set of source files for ship-
              ment off site.  Differs from `ccvvss cchheecckkoouutt' in that
              no  ccvvss administrative directories are created (and
              therefore `ccvvss ccoommmmiitt' cannot be  executed  from  a
              directory  prepared  with `ccvvss eexxppoorrtt'), and a sym-
              bolic tag must  be  specified.   (Does  not  change
              repository;  creates  directory  similar to working
              directories).

       hhiissttoorryy
              Show reports on ccvvss commands  that  you  or  others
              have  executed on a particular file or directory in
              the source repository.  (Does not change repository
              or  working directory.)  History logs are kept only
              if     enabled     by     creation      of      the
              `$$CCVVSSRROOOOTT//CCVVSSRROOOOTT//hhiissttoorryy' file; see ccvvss(55).

       iimmppoorrtt Incorporate a set of updates from off-site into the
              source  repository,   as   a   ``vendor   branch''.
              (Changes repository.)

       lloogg    Display  log information.  (Does not change reposi-
              tory or working directory.)

       rrddiiffff  Prepare a collection  of  diffs  as  a  patch  file
              between  two releases in the repository.  (Does not
              change repository or working directory.)

       rreelleeaassee
              Cancel a `ccvvss cchheecckkoouutt',  abandoning  any  changes.
              (Can delete working directory; no effect on reposi-
              tory.)

       rreemmoovvee Remove files from the source repository, pending  a
              `ccvvss ccoommmmiitt' on the same files.  (Does not directly
              affect repository; changes working directory.)

       rrttaagg   Explicitly specify a symbolic  tag  for  particular
              revisions  of  files in the source repository.  See
              also `ccvvss ttaagg'.  (Changes repository directly; does
              not require or affect working directory.)



                                                                5





CVS(1)                                                     CVS(1)


       ssttaattuuss Show  current status of files: latest version, ver-
              sion in working directory, whether working  version
              has  been  edited and, optionally, symbolic tags in
              the RCS file.  (Does not change repository or work-
              ing directory.)

       ttaagg    Specify a symbolic tag for files in the repository.
              By default, tags the revisions that were last  syn-
              chronized  with  your working directory.   (Changes
              repository directly; uses working directory without
              changing it.)

       uuppddaattee Bring  your  working  directory  up  to  date  with
              changes from the repository.  Merges are  performed
              automatically when possible; a warning is issued if
              manual  resolution  is  required  for   conflicting
              changes.   (Changes  working  directory;  does  not
              change repository.)

CCOOMMMMOONN CCOOMMMMAANNDD OOPPTTIIOONNSS
       This section describes the _c_o_m_m_a_n_d___o_p_t_i_o_n_s that are avail-
       able  across  several ccvvss commands.  Not all commands sup-
       port all of these options; each option is  only  supported
       for  commands  where it makes sense.  However, when a com-
       mand has one of these options you can count  on  the  same
       meaning  for the option as in other commands.  (Other com-
       mand options, which are listed with  the  individual  com-
       mands, may have different meanings from one ccvvss command to
       another.)  _W_a_r_n_i_n_g_: the hhiissttoorryy command is  an  exception;
       it  supports  many  options  that conflict even with these
       standard options.

       --DD _d_a_t_e___s_p_e_c
              Use  the  most  recent  revision  no   later   than
              _d_a_t_e___s_p_e_c  (a  single  argument,  date  description
              specifying a date in the past).  A wide variety  of
              date  formats  are  supported,  in  particular  ISO
              ("1972-09-24 20:05")  or  Internet  ("24  Sep  1972
              20:05").   The _d_a_t_e___s_p_e_c is interpreted as being in
              the local timezone, unless a specific  timezone  is
              specified.   The  specification  is ``sticky'' when
              you use it to make a private copy of a source file;
              that  is, when you get a working file using --DD, ccvvss
              records the date you  specified,  so  that  further
              updates  in  the  same  directory will use the same
              date (unless you explicitly override  it;  see  the
              description  of  the uuppddaattee command).  --DD is avail-
              able with  the  cchheecckkoouutt,  ddiiffff,  hhiissttoorryy,  eexxppoorrtt,
              rrddiiffff,  rrttaagg,  and  uuppddaattee  commands.   Examples of
              valid date specifications include:
                        11 mmoonntthh aaggoo
                        22 hhoouurrss aaggoo
                        440000000000 sseeccoonnddss aaggoo
                        llaasstt yyeeaarr



                                                                6





CVS(1)                                                     CVS(1)


                        llaasstt MMoonnddaayy
                        yyeesstteerrddaayy
                        aa ffoorrttnniigghhtt aaggoo
                        33//3311//9922 1100::0000::0077 PPSSTT
                        JJaannuuaarryy 2233,, 11998877 1100::0055ppmm
                        2222::0000 GGMMTT

       --ff     When you specify a particular date or  tag  to  ccvvss
              commands,  they  normally  ignore files that do not
              contain the tag (or did not exist on the date) that
              you specified.  Use the --ff option if you want files
              retrieved even when there is no match for  the  tag
              or  date.  (The most recent version is used in this
              situation.)  --ff is available with  these  commands:
              cchheecckkoouutt, eexxppoorrtt, rrddiiffff, rrttaagg, and uuppddaattee.

       --HH     Help;  describe the options available for this com-
              mand.  This is the only option  supported  for  _a_l_l
              ccvvss commands.

       --kk _k_f_l_a_g
              Alter  the  default processing of keywords.  The --kk
              option is available with the aadddd,  cchheecckkoouutt,  ddiiffff,
              eexxppoorrtt,  rrddiiffff,  and  uuppddaattee  commands.  Your _k_f_l_a_g
              specification is ``sticky'' when you use it to cre-
              ate  a private copy of a source file; that is, when
              you use this option with  the  cchheecckkoouutt  or  uuppddaattee
              commands,  ccvvss  associates your selected _k_f_l_a_g with
              the file, and  continues  to  use  it  with  future
              uuppddaattee  commands on the same file until you specify
              otherwise.

              Some of the more useful _k_f_l_a_gs are -ko and -kb (for
              binary  files),  and  -kv  which  is  useful for an
              eexxppoorrtt where you wish to retain keyword information
              after an iimmppoorrtt at some other site.

       --ll     Local;  run  only  in  current  working  directory,
              rather  than  recurring   through   subdirectories.
              Available  with  the  following commands: cchheecckkoouutt,
              ccoommmmiitt, ddiiffff, eexxppoorrtt, rreemmoovvee, rrddiiffff, rrttaagg,  ssttaattuuss,
              ttaagg,  and uuppddaattee.  _W_a_r_n_i_n_g_: this is not the same as
              the overall `ccvvss --ll' option, which you can  specify
              to the _l_e_f_t of a ccvvss command!

       --nn     Do  _n_o_t run any cchheecckkoouutt/ccoommmmiitt/ttaagg/uuppddaattee program.
              (A program can be specified to run on each of these
              activities,  in  the  modules database; this option
              bypasses it.)  Available with the cchheecckkoouutt, ccoommmmiitt,
              eexxppoorrtt,  and  rrttaagg  commands.  _W_a_r_n_i_n_g_: this is not
              the same as the overall `ccvvss --nn' option, which  you
              can specify to the _l_e_f_t of a ccvvss command!

       --PP     Prune  (remove)  directories  that  are empty after



                                                                7





CVS(1)                                                     CVS(1)


              being updated, on cchheecckkoouutt, or  uuppddaattee.   Normally,
              an  empty  directory (one that is void of revision-
              controlled files) is  left  alone.   Specifying  --PP
              will cause these directories to be silently removed
              from  your  checked-out  sources.   This  does  not
              remove the directory from the repository, only from
              your checked out copy.  Note that  this  option  is
              implied  by  the  --rr  or --DD options of cchheecckkoouutt and
              eexxppoorrtt.

       --pp     Pipe the files retrieved  from  the  repository  to
              standard  output,  rather  than writing them in the
              current directory.  Available with the cchheecckkoouutt and
              uuppddaattee commands.

       --rr _t_a_g Use  the  revision  specified  by  the _t_a_g argument
              instead of the default ``head'' revision.  As  well
              as arbitrary tags defined with the ttaagg or rrttaagg com-
              mand, two special tags are always available: `HHEEAADD'
              refers  to the most recent version available in the
              repository, and `BBAASSEE' refers to the  revision  you
              last  checked  out  into the current working direc-
              tory.

              The _t_a_g specification is ``sticky''  when  you  use
              this  option with `ccvvss cchheecckkoouutt' or `ccvvss uuppddaattee' to
              make your own copy of a file: ccvvss remembers the _t_a_g
              and  continues to use it on future uuppddaattee commands,
              until you specify otherwise.  _t_a_g can be  either  a
              symbolic  or numeric tag.  Specifying the --qq global
              option along with the --rr command  option  is  often
              useful,  to  suppress the warning messages when the
              RCS file does not contain the specified tag.  --rr is
              available with the cchheecckkoouutt, ccoommmmiitt, ddiiffff, hhiissttoorryy,
              eexxppoorrtt, rrddiiffff, rrttaagg, and uuppddaattee commands.  _W_a_r_n_i_n_g_:
              this  is  not  the  same  as  the  overall `ccvvss --rr'
              option, which you can specify to the _l_e_f_t of a  ccvvss
              command!

CCVVSS CCOOMMMMAANNDDSS
       Here (finally) are details on all the ccvvss commands and the
       options each accepts.  The summary lines  at  the  top  of
       each   command's  description  highlight  three  kinds  of
       things:

           Command Options and Arguments
                 Special options are described in  detail  below;
                 common  command  options  may appear only in the
                 summary line.

           Working Directory, or Repository?
                 Some ccvvss commands require a working directory to
                 operate;  some require a repository.  Also, some
                 commands _c_h_a_n_g_e the repository, some change  the



                                                                8





CVS(1)                                                     CVS(1)


                 working directory, and some change nothing.

           Synonyms
                 Many  commands have synonyms, which you may find
                 easier to remember (or type) than the  principal
                 name.


       aadddd [--kk _k_f_l_a_g] [--mm ''_m_e_s_s_a_g_e''] _f_i_l_e_s_._._.
              _R_e_q_u_i_r_e_s_: repository, working directory.
              _C_h_a_n_g_e_s_: working directory.
              _S_y_n_o_n_y_m_: nneeww
              Use  the aadddd command to create a new file or direc-
              tory in the source repository.  The files or direc-
              tories specified with aadddd must already exist in the
              current directory (which  must  have  been  created
              with  the  cchheecckkoouutt  command).   To add a whole new
              directory hierarchy to the source  repository  (for
              example, files received from a third-party vendor),
              use the `ccvvss iimmppoorrtt' command instead.

              If the argument to `ccvvss aadddd' refers to an immediate
              sub-directory, the directory is created at the cor-
              rect place in the source repository, and the neces-
              sary  ccvvss  administration files are created in your
              working directory.  If the directory already exists
              in  the  source repository, `ccvvss aadddd' still creates
              the administration files in  your  version  of  the
              directory.  This allows you to use `ccvvss aadddd' to add
              a particular directory to your private sources even
              if  someone  else created that directory after your
              cchheecckkoouutt of the sources.  You can do the following:

                        eexxaammppllee%% mmkkddiirr nneeww__ddiirreeccttoorryy
                        eexxaammppllee%% ccvvss aadddd nneeww__ddiirreeccttoorryy
                        eexxaammppllee%% ccvvss uuppddaattee nneeww__ddiirreeccttoorryy

              An alternate approach using `ccvvss uuppddaattee' might be:

                        eexxaammppllee%% ccvvss uuppddaattee --dd nneeww__ddiirreeccttoorryy

              (To add _a_n_y _a_v_a_i_l_a_b_l_e new directories to your work-
              ing directory, it's probably simpler  to  use  `ccvvss
              cchheecckkoouutt' or `ccvvss uuppddaattee --dd'.)

              The added files are not placed in the source repos-
              itory until you use `ccvvss ccoommmmiitt' to make the change
              permanent.   Doing  a  `ccvvss aadddd' on a file that was
              removed with the `ccvvss rreemmoovvee' command  will  resur-
              rect  the  file,  if no `ccvvss ccoommmmiitt' command inter-
              vened.

              You will have the opportunity to specify a  logging
              message,  as  usual,  when  you use `ccvvss ccoommmmiitt' to



                                                                9





CVS(1)                                                     CVS(1)


              make the new file permanent.  If you'd like to have
              another  logging  message associated with just _c_r_e_-
              _a_t_i_o_n of the file (for  example,  to  describe  the
              file's  purpose),  you  can specify it with the `--mm
              _m_e_s_s_a_g_e' option to the aadddd command.

              The `--kk kkffllaagg' option  specifies  the  default  way
              that  this  file  will be checked out.  The `kkffllaagg'
              argument is stored in  the  RCS  file  and  can  be
              changed with `ccvvss aaddmmiinn'.  Specifying `--kkoo' is use-
              ful for checking in binaries  that  shouldn't  have
              keywords expanded.

       aaddmmiinn [_r_c_s_-_o_p_t_i_o_n_s] _f_i_l_e_s_._._.
              _R_e_q_u_i_r_e_s_: repository, working directory.
              _C_h_a_n_g_e_s_: repository.
              _S_y_n_o_n_y_m_: rrccss
              This  is  the ccvvss interface to assorted administra-
              tive facilities, similar to rrccss(11).   This  command
              works  recursively, so extreme care should be used.

       cchheecckkoouutt [ooppttiioonnss] _m_o_d_u_l_e_s...
              _R_e_q_u_i_r_e_s_: repository.
              _C_h_a_n_g_e_s_: working directory.
              _S_y_n_o_n_y_m_s_: ccoo, ggeett
              Make a working directory containing copies  of  the
              source  files  specified by _m_o_d_u_l_e_s.  You must exe-
              cute `ccvvss cchheecckkoouutt' before using most of the  other
              ccvvss  commands,  since  most of them operate on your
              working directory.

              _m_o_d_u_l_e_s  are  either  symbolic  names   (themselves
              defined  as  the  module  `mmoodduulleess'  in  the source
              repository; see  ccvvss(55))  for  some  collection  of
              source  directories and files, or paths to directo-
              ries or files in the repository.

              Depending on the _m_o_d_u_l_e_s you specify, cchheecckkoouutt  may
              recursively  create  directories  and populate them
              with the appropriate source files.   You  can  then
              edit  these source files at any time (regardless of
              whether other software developers are editing their
              own  copies of the sources); update them to include
              new changes applied by others to the source reposi-
              tory;  or commit your work as a permanent change to
              the repository.

              Note that cchheecckkoouutt is used to  create  directories.
              The  top-level directory created is always added to
              the directory where cchheecckkoouutt is invoked,  and  usu-
              ally has the same name as the specified _m_o_d_u_l_e.  In
              the case of a _m_o_d_u_l_e alias, the created  sub-direc-
              tory may have a different name, but you can be sure
              that it will be a sub-directory, and that  cchheecckkoouutt



                                                               10





CVS(1)                                                     CVS(1)


              will show the relative path leading to each file as
              it is extracted into your private work area (unless
              you specify the --QQ global option).

              Running  `ccvvss  cchheecckkoouutt'  on  a  directory that was
              already built by a prior cchheecckkoouutt is  also  permit-
              ted,  and  has the same effect as specifying the --dd
              option to the uuppddaattee command described below.

              The _o_p_t_i_o_n_s permitted with `ccvvss  cchheecckkoouutt'  include
              the standard command options --PP, --ff, --kk _k_f_l_a_g , --ll,
              --nn, --pp, --rr _t_a_g, and --DD _d_a_t_e.

              In addition to those, you  can  use  these  special
              command options with cchheecckkoouutt:

              Use  the --AA option to reset any sticky tags, dates,
              or --kk options.  (If you get a  working  file  using
              one of the --rr, --DD, or --kk options, ccvvss remembers the
              corresponding tag, date,  or  _k_f_l_a_g  and  continues
              using  it  on  future updates; use the --AA option to
              make ccvvss forget these specifications, and  retrieve
              the ``head'' version of the file).

              The  --jj  _b_r_a_n_c_h  option  merges  the  changes  made
              between the resulting  revision  and  the  revision
              that  it  is based on (e.g., if the tag refers to a
              branch, ccvvss will merge all  changes  made  in  that
              branch into your working file).

              With  two --jj options, ccvvss will merge in the changes
              between the two respective revisions.  This can  be
              used  to ``remove'' a certain delta from your work-
              ing file.

              In addition, each --jj option can contain on optional
              date  specification which, when used with branches,
              can limit the chosen revision to one within a  spe-
              cific  date.   An  optional  date  is  specified by
              adding a colon (:) to the tag.  An example might be
              what  `ccvvss  iimmppoorrtt'  tells  you to do when you have
              just imported  sources  that  have  conflicts  with
              local changes:

                        eexxaammppllee%% ccvvss cchheecckkoouutt --jjTTAAGG::yyeesstteerrddaayy --jjTTAAGG mmoodduullee

              Use the --NN option with `--dd _d_i_r' to avoid shortening
              module paths in  your  working  directory.    (Nor-
              mally,  ccvvss shortens paths as much as possible when
              you specify an explicit target directory.)

              Use the --cc option to copy the module file,  sorted,
              to the standard output, instead of creating or mod-
              ifying any files or  directories  in  your  working



                                                               11





CVS(1)                                                     CVS(1)


              directory.

              Use  the --dd _d_i_r option to create a directory called
              _d_i_r for the working files,  instead  of  using  the
              module  name.   Unless  you  also use --NN, the paths
              created under _d_i_r will be as short as possible.

              Use the --ss  option  to  display  per-module  status
              information  stored  with  the --ss option within the
              modules file.

       ccoommmmiitt  [--llnnRR]  [--mm  '_l_o_g___m_e_s_s_a_g_e'  |  --ff  _f_i_l_e]  [--rr
              _r_e_v_i_s_i_o_n] [_f_i_l_e_s_._._.]
              _R_e_q_u_i_r_e_s_: working directory, repository.
              _C_h_a_n_g_e_s_: repository.
              _S_y_n_o_n_y_m_: ccii
              Use `ccvvss  ccoommmmiitt'  when  you  want  to  incorporate
              changes  from  your  working  source files into the
              general source repository.

              If you don't specify particular  _f_i_l_e_s  to  commit,
              all  of the files in your working current directory
              are examined.  ccoommmmiitt is careful to change  in  the
              repository  only  those  files that you have really
              changed.  By default (or if you explicitly  specify
              the  --RR  option),  files in subdirectories are also
              examined and committed if they  have  changed;  you
              can  use  the --ll option to limit ccoommmmiitt to the cur-
              rent directory only.  Sometimes  you  may  want  to
              force  a  file  to  be  committed even though it is
              unchanged; this is achieved with the --ff flag, which
              also has the effect of disabling recursion (you can
              turn it back on with --RR of course).

              ccoommmmiitt verifies that the selected files are  up  to
              date  with  the  current  revisions  in  the source
              repository; it will notify you,  and  exit  without
              committing,  if  any of the specified files must be
              made current first with `ccvvss uuppddaattee'.  ccoommmmiitt  does
              not  call  the  uuppddaattee  command for you, but rather
              leaves that for you to do when the time is right.

              When all is well, an editor is invoked to allow you
              to  enter a log message that will be written to one
              or more logging programs and placed in  the  source
              repository  file.   You can instead specify the log
              message on the command line  with  the  --mm  option,
              thus  suppressing the editor invocation, or use the
              --FF option to specify that the  argument  _f_i_l_e  con-
              tains the log message.

              The --rr option can be used to commit to a particular
              symbolic or  numeric  revision.   For  example,  to
              bring  all  your  files  up to the revision ``3.0''



                                                               12





CVS(1)                                                     CVS(1)


              (including those that haven't changed),  you  might
              do:

                        eexxaammppllee%% ccvvss ccoommmmiitt --rr33..00

              ccvvss  will  only  allow  you to commit to a revision
              that is on the main trunk (a revision with a single
              dot).   However,  you  can  also commit to a branch
              revision (one that has an even number of dots) with
              the  --rr  option.   To create a branch revision, one
              typically use the --bb option of the rrttaagg or ttaagg com-
              mands.  Then, either cchheecckkoouutt or uuppddaattee can be used
              to base your sources on the newly  created  branch.
              From  that point on, all ccoommmmiitt changes made within
              these working sources will be  automatically  added
              to  a branch revision, thereby not perturbing main-
              line development in any way.  For example,  if  you
              had  to  create  a  patch to the 1.2 version of the
              product, even though the  2.0  version  is  already
              under development, you might do:

                        eexxaammppllee%% ccvvss rrttaagg --bb --rrFFCCSS11__22 FFCCSS11__22__PPaattcchh pprroodduucctt__mmoodduullee
                        eexxaammppllee%% ccvvss cchheecckkoouutt --rrFFCCSS11__22__PPaattcchh pprroodduucctt__mmoodduullee
                        eexxaammppllee%% ccdd pprroodduucctt__mmoodduullee
                        [[[[ hhaacckk aawwaayy ]]]]
                        eexxaammppllee%% ccvvss ccoommmmiitt

              Say you have been working on some extremely experi-
              mental software, based  on  whatever  revision  you
              happened  to checkout last week.  If others in your
              group would like to work on this software with you,
              but  without  disturbing main-line development, you
              could commit your change to a new  branch.   Others
              can  then checkout your experimental stuff and uti-
              lize the full benefit of ccvvss  conflict  resolution.
              The scenario might look like:

                        eexxaammppllee%% ccvvss ttaagg --bb EEXXPPRR11
                        eexxaammppllee%% ccvvss uuppddaattee --rrEEXXPPRR11
                        [[[[ hhaacckk aawwaayy ]]]]
                        eexxaammppllee%% ccvvss ccoommmmiitt

              Others   would  simply  do  `ccvvss  cchheecckkoouutt  --rrEEXXPPRR11
              wwhhaatteevveerr__mmoodduullee' to work with you on the experimen-
              tal change.

       ddiiffff  [--kkll] [_r_c_s_d_i_f_f___o_p_t_i_o_n_s] [[--rr _r_e_v_1 | --DD _d_a_t_e_1] [--rr
              _r_e_v_2 | --DD _d_a_t_e_2]] [_f_i_l_e_s_._._.]
              _R_e_q_u_i_r_e_s_: working directory, repository.
              _C_h_a_n_g_e_s_: nothing.
              You  can  compare your working files with revisions
              in the source repository, with the `ccvvss ddiiffff'  com-
              mand.   If you don't specify a particular revision,
              your files are compared  with  the  revisions  they



                                                               13





CVS(1)                                                     CVS(1)


              were  based  on.  You can also use the standard ccvvss
              command option --rr to specify a particular  revision
              to compare your files with.  Finally, if you use --rr
              twice, you can see differences  between  two  revi-
              sions  in  the repository.  You can also specify --DD
              options to diff against a  revision  in  the  past.
              The --rr and --DD options can be mixed together with at
              most two options ever specified.

              See  rrccssddiiffff(11)  for  a  list  of  other   accepted
              options.

              If  you  don't specify any files, ddiiffff will display
              differences for all  those  files  in  the  current
              directory  (and  its subdirectories, unless you use
              the standard option --ll) that differ from the corre-
              sponding  revision  in  the source repository (i.e.
              files that _y_o_u have changed), or that  differ  from
              the revision specified.

       eexxppoorrtt [-ffllNNnnQQqq] --rr _r_e_v|--DD _d_a_t_e [--dd _d_i_r] [--kk _k_f_l_a_g]
              _m_o_d_u_l_e...
              _R_e_q_u_i_r_e_s_: repository.
              _C_h_a_n_g_e_s_: current directory.
              This command is a variant of `ccvvss cchheecckkoouutt'; use it
              when you want a copy of the source for _m_o_d_u_l_e with-
              out the ccvvss administrative directories.  For  exam-
              ple,  you  might use `ccvvss eexxppoorrtt' to prepare source
              for shipment off-site.  This command _r_e_q_u_i_r_e_s  that
              you  specify a date or tag (with --DD or --rr), so that
              you can count on reproducing the source you ship to
              others.

              The  only  non-standard options are `--dd _d_i_r' (write
              the source into  directory  _d_i_r)  and  `--NN'  (don't
              shorten  module  paths).  These have the same mean-
              ings as the same options in `ccvvss cchheecckkoouutt'.

              The --kkvv option is useful when eexxppoorrtt is used.  This
              causes  any  keywords  to  be expanded such that an
              iimmppoorrtt done at some other site will  not  lose  the
              keyword  revision information.  Other _k_f_l_a_gs may be
              used with `ccvvss eexxppoorrtt' and are described in  ccoo(11).

       hhiissttoorryy [--_r_e_p_o_r_t] [--_f_l_a_g_s] [--_o_p_t_i_o_n_s _a_r_g_s] [_f_i_l_e_s...]
              _R_e_q_u_i_r_e_s_: the file `$$CCVVSSRROOOOTT//CCVVSSRROOOOTT//hhiissttoorryy'
              _C_h_a_n_g_e_s_: nothing.
              ccvvss  keeps  a  history file that tracks each use of
              the cchheecckkoouutt, ccoommmmiitt,  rrttaagg,  uuppddaattee,  and  rreelleeaassee
              commands.   You  can  use  `ccvvss hhiissttoorryy' to display
              this information in various formats.

              _W_a_r_n_i_n_g_: `ccvvss hhiissttoorryy' uses `--ff', `--ll',  `--nn',  and
              `--pp' in ways that conflict with the descriptions in



                                                               14





CVS(1)                                                     CVS(1)


              COMMON COMMAND OPTIONS.

              Several options (shown above  as  --_r_e_p_o_r_t)  control
              what kind of report is generated:

             --cc  Report  on each time ccoommmmiitt was used (i.e., each
                 time the repository was modified).

             --mm _m_o_d_u_l_e
                 Report on a particular _m_o_d_u_l_e.  (You  can  mean-
                 ingfully  use  --mm  more than once on the command
                 line.)

             --oo  Report on checked-out modules.

             --TT  Report on all tags.

             --xx _t_y_p_e
                 Extract a particular set of record types _X  from
                 the  ccvvss  history.   The  types are indicated by
                 single letters, which you may specify in  combi-
                 nation.   Certain  commands have a single record
                 type: cchheecckkoouutt (type `O'), rreelleeaassee  (type  `F'),
                 and  rrttaagg  (type `T').  One of four record types
                 may result from an uuppddaattee: `W', when the working
                 copy of a file is deleted during update (because
                 it was gone from the repository);  `U',  when  a
                 working  file  was  copied  from the repository;
                 `G', when a merge  was  necessary  and  it  suc-
                 ceeded;  and 'C', when a merge was necessary but
                 collisions were detected (requiring manual merg-
                 ing).    Finally,  one  of  three  record  types
                 results from ccoommmmiitt: `M', when a file was  modi-
                 fied;  `A', when a file is first added; and `R',
                 when a file is removed.

             --ee  Everything (all  record  types);  equivalent  to
                 specifying `--xxMMAACCFFRROOGGWWUUTT'.

             --zz _z_o_n_e
                 Use  time  zone  _z_o_n_e  when  outputting  history
                 records.  The zone  name  LLTT  stands  for  local
                 time;  numeric  offsets stand for hours and min-
                 utes ahead of UTC.  For  example,  ++00553300  stands
                 for  5  hours and 30 minutes ahead of (i.e. east
                 of) UTC.

            The options shown  as  --_f_l_a_g_s  constrain  the  report
            without requiring option arguments:

             --aa  Show  data for all users (the default is to show
                 data only for the user executing `ccvvss hhiissttoorryy').

             --ll  Show last modification only.



                                                               15





CVS(1)                                                     CVS(1)


             --ww  Show  only  the  records  for modifications done
                 from  the  same  working  directory  where  `ccvvss
                 hhiissttoorryy' is executing.

            The  options  shown  as  --_o_p_t_i_o_n_s  _a_r_g_s constrain the
            report based on an argument:

             --bb _s_t_r
                 Show data back to a record containing the string
                 _s_t_r in either the module name, the file name, or
                 the repository path.

             --DD _d_a_t_e
                 Show data since _d_a_t_e.

             --pp _r_e_p_o_s_i_t_o_r_y
                 Show data for  a  particular  source  repository
                 (you  can specify several --pp options on the same
                 command line).

             --rr _r_e_v
                 Show records referring to  revisions  since  the
                 revision  or tag named _r_e_v appears in individual
                 RCS files.  Each RCS file is  searched  for  the
                 revision or tag.

             --tt _t_a_g
                 Show records since tag _t_a_g was last added to the
                 history file.  This differs  from  the  --rr  flag
                 above  in  that  it reads only the history file,
                 not the RCS files, and is much faster.

             --uu _n_a_m_e
                 Show records for user _n_a_m_e.


       iimmppoorrtt [--_o_p_t_i_o_n_s] _r_e_p_o_s_i_t_o_r_y _v_e_n_d_o_r_t_a_g _r_e_l_e_a_s_e_t_a_g...
              _R_e_q_u_i_r_e_s_: Repository,  source  distribution  direc-
              tory.
              _C_h_a_n_g_e_s_: repository.
              Use  `ccvvss  iimmppoorrtt'  to incorporate an entire source
              distribution from an outside source (e.g., a source
              vendor) into your source repository directory.  You
              can use this command both for initial creation of a
              repository, and for wholesale updates to the module
              form the outside source.

              The _r_e_p_o_s_i_t_o_r_y argument gives a directory name  (or
              a path to a directory) under the CVS root directory
              for repositories; if the directory did  not  exist,
              iimmppoorrtt creates it.

              When  you use iimmppoorrtt for updates to source that has
              been modified in your source  repository  (since  a



                                                               16





CVS(1)                                                     CVS(1)


              prior iimmppoorrtt), it will notify you of any files that
              conflict in the two branches  of  development;  use
              `ccvvss  cchheecckkoouutt --jj' to reconcile the differences, as
              iimmppoorrtt instructs you to do.

              By default, certain file names are  ignored  during
              `ccvvss iimmppoorrtt': names associated with CVS administra-
              tion, or with other common source control  systems;
              common names for patch files, object files, archive
              files, and editor backup  files;  and  other  names
              that  are  usually artifacts of assorted utilities.
              For an up to date list of ignored file  names,  see
              the Cederqvist manual (as described in the SEE ALSO
              section of this manpage).

              The  outside  source  is  saved  in  a  first-level
              branch,  by default `11..11..11'.  Updates are leaves of
              this branch; for  example,  files  from  the  first
              imported  collection  of  source  will  be revision
              `11..11..11..11',  then  files  from  the  first  imported
              update will be revision `11..11..11..22', and so on.

              At  least three arguments are required.  _r_e_p_o_s_i_t_o_r_y
              is needed to identify  the  collection  of  source.
              _v_e_n_d_o_r_t_a_g is a tag for the entire branch (e.g., for
              `11..11..11').  You  must  also  specify  at  least  one
              _r_e_l_e_a_s_e_t_a_g to identify the files at the leaves cre-
              ated each time you execute `ccvvss iimmppoorrtt'.

              One of the standard ccvvss command options  is  avail-
              able:  --mm _m_e_s_s_a_g_e.  If you do not specify a logging
              message with --mm, your editor is  invoked  (as  with
              ccoommmmiitt) to allow you to enter one.

              There are three additional special options.

              Use  `--dd'  to specify that each file's time of last
              modification should be used for  the  checkin  date
              and time.

              Use  `--bb  _b_r_a_n_c_h'  to  specify a first-level branch
              other than `11..11..11'.

              Use `--II _n_a_m_e' to specify file names that should  be
              ignored  during  iimmppoorrtt.   You  can use this option
              repeatedly.  To avoid ignoring  any  files  at  all
              (even those ignored by default), specify `--II !!'.

       lloogg [--ll] _r_l_o_g_-_o_p_t_i_o_n_s _[_f_i_l_e_s...]
              _R_e_q_u_i_r_e_s_: repository, working directory.
              _C_h_a_n_g_e_s_: nothing.
              _S_y_n_o_n_y_m_: rrlloogg
              Display  log information for _f_i_l_e_s.  Among the more
              useful options are --hh to display  only  the  header



                                                               17





CVS(1)                                                     CVS(1)


              (including  tag  definitions,  but omitting most of
              the full log); --rr  to  select  logs  on  particular
              revisions  or ranges of revisions; and --dd to select
              particular dates or date ranges.  See  rrlloogg(11)  for
              full  explanations.   This  command is recursive by
              default, unless the --ll option is specified.

       rrddiiffff [--_f_l_a_g_s] [--VV _v_n] [--rr _t|--DD _d [--rr _t_2|--DD _d_2]]
              _m_o_d_u_l_e_s_._._.
              _R_e_q_u_i_r_e_s_: repository.
              _C_h_a_n_g_e_s_: nothing.
              _S_y_n_o_n_y_m_: ppaattcchh
              Builds  a  Larry  Wall format ppaattcchh(11) file between
              two releases, that can be  fed  directly  into  the
              ppaattcchh  program  to  bring an old release up-to-date
              with the new release.  (This is one of the few  ccvvss
              commands  that  operates  directly from the reposi-
              tory, and doesn't require a prior  cchheecckkoouutt.)   The
              diff  output is sent to the standard output device.
              You can specify  (using  the  standard  --rr  and  --DD
              options) any combination of one or two revisions or
              dates.  If only one revision or date is  specified,
              the  patch  file  reflects differences between that
              revision or date and the current ``head'' revisions
              in the RCS file.

              Note  that if the software release affected is con-
              tained in more than one directory, then it  may  be
              necessary  to  specify  the  --pp option to the ppaattcchh
              command when patching  the  old  sources,  so  that
              ppaattcchh is able to find the files that are located in
              other directories.

              The standard option _f_l_a_g_s --ff, and --ll are  available
              with  this command.  There are also several special
              options flags:

              If you use the --ss option, no patch output  is  pro-
              duced.   Instead, a summary of the changed or added
              files between the two releases is sent to the stan-
              dard  output  device.   This  is useful for finding
              out, for example, which files have changed  between
              two dates or revisions.

              If  you  use  the  --tt option, a diff of the top two
              revisions is sent to the  standard  output  device.
              This is most useful for seeing what the last change
              to a file was.

              If you use the --uu option, the patch output uses the
              newer ``unidiff'' format for context diffs.

              You  can use --cc to explicitly specify the `ddiiffff --cc'
              form of context diffs (which is  the  default),  if



                                                               18





CVS(1)                                                     CVS(1)


              you like.

       rreelleeaassee [--ddQQqq] _m_o_d_u_l_e_s...
              _R_e_q_u_i_r_e_s_: Working directory.
              _C_h_a_n_g_e_s_: Working directory, history log.
              This  command  is meant to safely cancel the effect
              of `ccvvss cchheecckkoouutt''..' Since ccvvss doesn't  lock  files,
              it  isn't  strictly  necessary to use this command.
              You can always simply delete  your  working  direc-
              tory,  if you like; but you risk losing changes you
              may have forgotten, and you leave no trace  in  the
              ccvvss  history file that you've abandoned your check-
              out.

              Use `ccvvss rreelleeaassee' to avoid  these  problems.   This
              command  checks  that  no  un-committed changes are
              present; that you are executing it from immediately
              above, or inside, a ccvvss working directory; and that
              the repository recorded for your files is the  same
              as the repository defined in the module database.

              If  all  these  conditions  are true, `ccvvss rreelleeaassee'
              leaves a record of its execution (attesting to your
              intentionally  abandoning your checkout) in the ccvvss
              history log.

              You can use the --dd flag to request that your  work-
              ing  copies  of  the source files be deleted if the
              rreelleeaassee succeeds.

       rreemmoovvee [--llRR] [_f_i_l_e_s_._._.]
              _R_e_q_u_i_r_e_s_: Working directory.
              _C_h_a_n_g_e_s_: Working directory.
              _S_y_n_o_n_y_m_s_: rrmm, ddeelleettee
              Use this command to declare that you wish to remove
              _f_i_l_e_s  from  the  source repository.  Like most ccvvss
              commands, `ccvvss rreemmoovvee' works on files in your work-
              ing  directory, not directly on the repository.  As
              a safeguard, it also requires that you first  erase
              the specified files from your working directory.

              The  files are not actually removed until you apply
              your changes to the repository with ccoommmmiitt; at that
              point,  the  corresponding  RCS files in the source
              repository are _m_o_v_e_d  into  the  `AAttttiicc'  directory
              (also within the source repository).

              This  command  is  recursive by default, scheduling
              all physically removed  files  that  it  finds  for
              removal  by  the next ccoommmmiitt.  Use the --ll option to
              avoid this recursion, or just specify  that  actual
              files that you wish remove to consider.





                                                               19





CVS(1)                                                     CVS(1)


       rrttaagg  [--ffaallnnRRQQqq]  [--bb]  [--dd]  [--rr  _t_a_g  |  --DD  _d_a_t_e] _s_y_m_-
              _b_o_l_i_c___t_a_g _m_o_d_u_l_e_s_._._.
              _R_e_q_u_i_r_e_s_: repository.
              _C_h_a_n_g_e_s_: repository.
              _S_y_n_o_n_y_m_: rrffrreeeezzee
              You can use this command to assign symbolic tags to
              particular, explicitly specified source versions in
              the  repository.   `ccvvss rrttaagg' works directly on the
              repository contents (and requires no  prior  cchheecckk--
              oouutt).  Use `ccvvss ttaagg' instead, to base the selection
              of versions to tag on the contents of your  working
              directory.

              In general, tags (often the symbolic names of soft-
              ware distributions) should not be removed, but  the
              --dd  option  is  available as a means to remove com-
              pletely obsolete symbolic names  if  necessary  (as
              might be the case for an Alpha release, say).

              `ccvvss rrttaagg' will not move a tag that already exists.
              With the --FF option, however, `ccvvss  rrttaagg'  will  re-
              locate  any  instance  of _s_y_m_b_o_l_i_c___t_a_g that already
              exists on that file to the new repository versions.
              Without the --FF option, attempting to use `ccvvss rrttaagg'
              to apply a tag that already  exists  on  that  file
              will produce an error message.

              The  --bb  option  makes  the  tag  a ``branch'' tag,
              allowing concurrent, isolated development.  This is
              most  useful  for  creating a patch to a previously
              released software distribution.

              You can use the standard --rr and --DD options  to  tag
              only  those  files  that  already contain a certain
              tag.  This method would be used to  rename  a  tag:
              tag  only the files identified by the old tag, then
              delete the old tag, leaving the new tag on  exactly
              the same files as the old tag.

              rrttaagg  executes  recursively by default, tagging all
              subdirectories of _m_o_d_u_l_e_s you specify in the  argu-
              ment.   You can restrict its operation to top-level
              directories with the standard --ll option; or you can
              explicitly request recursion with --RR.

              The  modules database can specify a program to exe-
              cute whenever a tag is specified; a typical use  is
              to  send  electronic  mail to a group of interested
              parties.  If you want to bypass that  program,  use
              the standard --nn option.

              Use  the --aa option to have rrttaagg look in the `AAttttiicc'
              for removed files that contain the  specified  tag.
              The tag is removed from these files, which makes it



                                                               20





CVS(1)                                                     CVS(1)


              convenient to re-use a symbolic tag as  development
              continues (and files get removed from the up-coming
              distribution).

       ssttaattuuss [--llRRqqQQ] [--vv] [_f_i_l_e_s...]
              _R_e_q_u_i_r_e_s_: working directory, repository.
              _C_h_a_n_g_e_s_: nothing.
              Display a brief report on  the  current  status  of
              _f_i_l_e_s   with  respect  to  the  source  repository,
              including  any  ``sticky''  tags,  dates,   or   --kk
              options.   (``Sticky''  options  will  restrict how
              `ccvvss uuppddaattee' operates until you reset them; see the
              description of `ccvvss uuppddaattee --AA......'.)

              You  can  also  use  this command to anticipate the
              potential impact of a `ccvvss uuppddaattee' on your  working
              source  directory.  If you do not specify any _f_i_l_e_s
              explicitly, reports are shown for  all  files  that
              ccvvss  has placed in your working directory.  You can
              limit the scope  of  this  search  to  the  current
              directory  itself (not its subdirectories) with the
              standard --ll option  flag;  or  you  can  explicitly
              request   recursive  status  reports  with  the  --RR
              option.

              The --vv option causes the symbolic tags for the  RCS
              file to be displayed as well.

       ttaagg  [--llQQqqRR]  [--FF] [--bb] [--dd] [--rr _t_a_g | --DD _d_a_t_e] [--ff] _s_y_m_-
              _b_o_l_i_c___t_a_g [_f_i_l_e_s...]
              _R_e_q_u_i_r_e_s_: working directory, repository.
              _C_h_a_n_g_e_s_: repository.
              _S_y_n_o_n_y_m_: ffrreeeezzee
              Use  this  command  to  assign symbolic tags to the
              nearest  repository  versions   to   your   working
              sources.   The  tags are applied immediately to the
              repository, as with rrttaagg.

              One use for tags is to record a ``snapshot'' of the
              current  sources when the software freeze date of a
              project arrives.   As  bugs  are  fixed  after  the
              freeze date, only those changed sources that are to
              be part of the release need be re-tagged.

              The symbolic tags are meant to  permanently  record
              which  revisions of which files were used in creat-
              ing a software distribution.  The cchheecckkoouutt,  eexxppoorrtt
              and  uuppddaattee  commands allow you to extract an exact
              copy of a tagged release at any time in the future,
              regardless  of  whether  files  have  been changed,
              added, or removed since the release was tagged.

              You can use the standard --rr and --DD options  to  tag
              only  those  files  that  already contain a certain



                                                               21





CVS(1)                                                     CVS(1)


              tag.  This method would be used to  rename  a  tag:
              tag  only the files identified by the old tag, then
              delete the old tag, leaving the new tag on  exactly
              the same files as the old tag.

              Specifying  the --ff flag in addition to the --rr or --DD
              flags will tag those files  named  on  the  command
              line even if they do not contain the old tag or did
              not exist on the specified date.

              By default (without a --rr or --DD flag)  the  versions
              to  be  tagged  are  supplied implicitly by the ccvvss
              records of your working files' history rather  than
              applied explicitly.

              If  you  use `ccvvss ttaagg --dd _s_y_m_b_o_l_i_c___t_a_g......', the sym-
              bolic tag you specify is _d_e_l_e_t_e_d instead  of  being
              added.   _W_a_r_n_i_n_g:  Be  very  certain of your ground
              before you delete a  tag;  doing  this  effectively
              discards  some  historical  information,  which may
              later turn out to have been valuable.

              `ccvvss ttaagg' will not move a tag that already  exists.
              With  the  --FF  option,  however, `ccvvss ttaagg' will re-
              locate any instance of  _s_y_m_b_o_l_i_c___t_a_g  that  already
              exists on that file to the new repository versions.
              Without the --FF option, attempting to use `ccvvss  ttaagg'
              to  apply  a  tag  that already exists on that file
              will produce an error message.

              The --bb option  makes  the  tag  a  ``branch''  tag,
              allowing concurrent, isolated development.  This is
              most useful for creating a patch  to  a  previously
              released software distribution.

              Normally,  ttaagg  executes recursively through subdi-
              rectories; you can prevent this by using the  stan-
              dard --ll option, or specify the recursion explicitly
              by using --RR.

       uuppddaattee [--AAddffllPPppQQqqRR] [--dd] [--rr _t_a_g|--DD _d_a_t_e] _f_i_l_e_s_._._.
              _R_e_q_u_i_r_e_s_: repository, working directory.
              _C_h_a_n_g_e_s_: working directory.
              After you've run cchheecckkoouutt to  create  your  private
              copy  of  source  from the common repository, other
              developers  will  continue  changing  the   central
              source.   From  time to time, when it is convenient
              in your development process, you can use the uuppddaattee
              command  from within your working directory to rec-
              oncile your work with any revisions applied to  the
              source  repository  since  your  last  cchheecckkoouutt  or
              uuppddaattee.

              uuppddaattee  keeps  you  informed  of  its  progress  by



                                                               22





CVS(1)                                                     CVS(1)


              printing a line for each file, prefaced with one of
              the characters `UU AA RR MM CC ??' to indicate the status
              of the file:

       UU _f_i_l_e    The  file was brought _u_p _t_o _d_a_t_e with respect to
                 the repository.  This is done for any file  that
                 exists in the repository but not in your source,
                 and for files that you haven't changed  but  are
                 not  the  most  recent versions available in the
                 repository.

       AA _f_i_l_e    The file has been _a_d_d_e_d to your private copy  of
                 the  sources,  and  will  be added to the source
                 repository when you  run  `ccvvss  ccoommmmiitt'  on  the
                 file.   This  is a reminder to you that the file
                 needs to be committed.

       RR _f_i_l_e    The file has been _r_e_m_o_v_e_d from your private copy
                 of  the  sources,  and  will be removed from the
                 source repository when you run `ccvvss  ccoommmmiitt'  on
                 the  file.   This  is a reminder to you that the
                 file needs to be committed.

       MM _f_i_l_e    The file is _m_o_d_i_f_i_e_d in your working  directory.
                 `MM'  can  indicate  one of two states for a file
                 you're working on: either there were no  modifi-
                 cations  to  the same file in the repository, so
                 that your file remains as you last  saw  it;  or
                 there  were  modifications  in the repository as
                 well as in your copy, but they were _m_e_r_g_e_d  suc-
                 cessfully,  without  conflict,  in  your working
                 directory.

       CC _f_i_l_e    A _c_o_n_f_l_i_c_t was detected while  trying  to  merge
                 your  changes  to  _f_i_l_e  with  changes  from the
                 source repository.  _f_i_l_e (the copy in your work-
                 ing  directory) is now the result of merging the
                 two versions; an unmodified copy of your file is
                 also  in  your  working directory, with the name
                 `..##_f_i_l_e.._v_e_r_s_i_o_n', where _v_e_r_s_i_o_n is the  revision
                 that  your  modified  file  started from.  (Note
                 that some systems automatically purge files that
                 begin  with  `..##' if they have not been accessed
                 for a few days.  If you intend to keep a copy of
                 your  original  file,  it is a very good idea to
                 rename it.)

       ?? _f_i_l_e    _f_i_l_e is in your working directory, but does  not
                 correspond to anything in the source repository,
                 and is not in the  list  of  files  for  ccvvss  to
                 ignore (see the description of the --II option).


            Use the --AA option to reset any sticky tags, dates, or



                                                               23





CVS(1)                                                     CVS(1)


            --kk options.  (If you get a working copy of a file  by
            using one of the --rr, --DD, or --kk options, ccvvss remembers
            the corresponding tag, date, or _k_f_l_a_g  and  continues
            using it on future updates; use the --AA option to make
            ccvvss forget these  specifications,  and  retrieve  the
            ``head'' version of the file).

            The  --jj_b_r_a_n_c_h  option merges the changes made between
            the resulting revision and the revision  that  it  is
            based  on  (e.g.,  if the tag refers to a branch, ccvvss
            will merge all changes made in that branch into  your
            working file).

            With  two  --jj  options, ccvvss will merge in the changes
            between the two respective revisions.   This  can  be
            used  to ``remove'' a certain delta from your working
            file.  E.g., If the file foo.c is based  on  revision
            1.6 and I want to remove the changes made between 1.3
            and 1.5, I might do:

                      eexxaammppllee%% ccvvss uuppddaattee --jj11..55 --jj11..33 ffoooo..cc   ## nnoottee tthhee oorrddeerr......

            In addition, each --jj option can contain  on  optional
            date  specification  which,  when used with branches,
            can limit the chosen revision to one  within  a  spe-
            cific  date.  An optional date is specified by adding
            a colon (:) to the tag.

                      --jjSSyymmbboolliicc__TTaagg::DDaattee__SSppeecciiffiieerr

            Use the --dd option  to  create  any  directories  that
            exist  in  the repository if they're missing from the
            working directory.  (Normally, update  acts  only  on
            directories  and  files that were already enrolled in
            your working directory.)  This is useful for updating
            directories that were created in the repository since
            the initial cchheecckkoouutt; but it has an unfortunate  side
            effect.  If you deliberately avoided certain directo-
            ries in the repository when you created your  working
            directory  (either through use of a module name or by
            listing explicitly  the  files  and  directories  you
            wanted  on  the  command line), then updating with --dd
            will create those directories, which may not be  what
            you want.

            Use  --II  _n_a_m_e  to ignore files whose names match _n_a_m_e
            (in your working directory) during the  update.   You
            can  specify --II more than once on the command line to
            specify several files to ignore.  By default,  uuppddaattee
            ignores files whose names match certain patterns; for
            an up to date list of ignored  file  names,  see  the
            Cederqvist  manual (as described in the SEE ALSO sec-
            tion of this manpage).




                                                               24





CVS(1)                                                     CVS(1)


            Use `--II !!' to avoid ignoring any files at all.

            The standard ccvvss command options --ff, --kk, --ll, --PP,  --pp,
            and --rr are also available with uuppddaattee.

FFIILLEESS
       For more detailed information on ccvvss supporting files, see
       ccvvss(55).

       _F_i_l_e_s _i_n _h_o_m_e _d_i_r_e_c_t_o_r_i_e_s_:

       .cvsrc The ccvvss initialisation file.  Lines  in  this  file
              can be used to specify default options for each ccvvss
              command.  For  example  the  line  `ddiiffff  --cc'  will
              ensure  that  `ccvvss  ddiiffff'  is  always passed the --cc
              option in addition to any other options  passed  on
              the command line.

       .cvswrappers
              Specifies  wrappers to be used in addition to those
              specified in the CVSROOT/cvswrappers  file  in  the
              repository.

       _F_i_l_e_s _i_n _w_o_r_k_i_n_g _d_i_r_e_c_t_o_r_i_e_s_:

       CVS    A  directory  of  ccvvss administrative files.  _D_o _n_o_t
              _d_e_l_e_t_e_.

       CVS/Entries
              List and status of files in your working directory.

       CVS/Entries.Backup
              A backup of `CCVVSS//EEnnttrriieess'.

       CVS/Entries.Static
              Flag: do not add more entries on `ccvvss uuppddaattee'.

       CVS/Root
              Pathname  to the repository ( CVSROOT ) location at
              the time of checkout.  This file is used instead of
              the CVSROOT environment variable if the environment
              variable is not set.  A  warning  message  will  be
              issued  when the contents of this file and the CVS-
              ROOT environment variable differ.  The file may  be
              over-ridden     by     the    presence    of    the
              CVS_IGNORE_REMOTE_ROOT environment variable.

       CVS/Repository
              Pathname to  the  corresponding  directory  in  the
              source repository.

       CVS/Tag
              Contains  the  per-directory ``sticky'' tag or date
              information.  This file is created/updated when you



                                                               25





CVS(1)                                                     CVS(1)


              specify  --rr  or  --DD  to the cchheecckkoouutt or uuppddaattee com-
              mands, and no files are specified.

       CVS/Checkin.prog
              Name of program to run on `ccvvss ccoommmmiitt'.

       CVS/Update.prog
              Name of program to run on `ccvvss uuppddaattee'.

       _F_i_l_e_s _i_n _s_o_u_r_c_e _r_e_p_o_s_i_t_o_r_i_e_s_:

       $CVSROOT/CVSROOT
              Directory of global administrative files for repos-
              itory.

       CVSROOT/commitinfo,v
              Records   programs   for   filtering  `ccvvss  ccoommmmiitt'
              requests.

       CVSROOT/cvswrappers,v
              Records ccvvss wrapper commands to be used when check-
              ing files into and out of the repository.  Wrappers
              allow the file or directory to be processed on  the
              way in and out of CVS.  The intended uses are many,
              one possible use would be  to  reformat  a  C  file
              before  the  file is checked in, so all of the code
              in the repository looks the same.

       CVSROOT/editinfo,v
              Records  programs   for   editing/validating   `ccvvss
              ccoommmmiitt' log entries.

       CVSROOT/history
              Log file of ccvvss transactions.

       CVSROOT/loginfo,v
              Records   programs  for  piping  `ccvvss  ccoommmmiitt'  log
              entries.

       CVSROOT/modules,v
              Definitions for modules in this repository.

       CVSROOT/rcsinfo,v
              Records pathnames to templates used during  a  `ccvvss
              ccoommmmiitt' operation.

       CVSROOT/taginfo,v
              Records  programs  for validating/logging `ccvvss ttaagg'
              and `ccvvss rrttaagg' operations.

       MODULE/Attic
              Directory for removed source files.





                                                               26





CVS(1)                                                     CVS(1)


       #cvs.lock
              A lock directory created by ccvvss when  doing  sensi-
              tive changes to the source repository.

       #cvs.tfl._p_i_d
              Temporary lock file for repository.

       #cvs.rfl._p_i_d
              A read lock.

       #cvs.wfl._p_i_d
              A write lock.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       CVSROOT
              Should contain the full pathname to the root of the
              ccvvss source repository  (where  the  RCS  files  are
              kept).   This  information must be available to ccvvss
              for most commands to execute;  if  CVSROOT  is  not
              set,  or if you wish to override it for one invoca-
              tion, you can supply it on the command  line:  `ccvvss
              --dd  _c_v_s_r_o_o_t _c_v_s___c_o_m_m_a_n_d......' You may not need to set
              CVSROOT if your ccvvss binary has the right path  com-
              piled  in;  use `ccvvss --vv' to display all compiled-in
              paths.

       CVSREAD
              If this is set, cchheecckkoouutt and uuppddaattee will  try  hard
              to  make  the files in your working directory read-
              only.  When this is not set, the  default  behavior
              is to permit modification of your working files.

       RCSBIN Specifies  the full pathname where to find RCS pro-
              grams, such as ccoo(11) and ccii(11) (CVS 1.9 and older).

       CVSEDITOR
              Specifies the program to use for recording log mes-
              sages during ccoommmmiitt.  If not set, the EDITOR  envi-
              ronment variable is used instead.  If EDITOR is not
              set either, the default is //uussrr//uuccbb//vvii.

       CVS_IGNORE_REMOTE_ROOT
              If this variable is set then ccvvss  will  ignore  all
              references  to  remote repositories in the CVS/Root
              file.

       CVS_RSH
              ccvvss uses the contents of this variable to determine
              the  name  of  the remote shell command to use when
              starting a ccvvss server.  If this variable is not set
              then `rrsshh' is used.

       CVS_SERVER
              ccvvss uses the contents of this variable to determine



                                                               27





CVS(1)                                                     CVS(1)


              the name of the ccvvss server command.  If this  vari-
              able is not set then `ccvvss' is used.

       CVSWRAPPERS
              This  variable  is used by the `ccvvsswwrraappppeerrss' script
              to determine the name of the wrapper file, in addi-
              tion  to  the  wrappers  defaults  contained in the
              repository  (CVSROOT/cvswrappers)  and  the  user's
              home directory (~/.cvswrappers).

AAUUTTHHOORRSS
       Dick Grune
              Original  author  of  the  ccvvss shell script version
              posted to ccoommpp..ssoouurrcceess..uunniixx in the volume6  release
              of  December,  1986.  Credited with much of the ccvvss
              conflict resolution algorithms.

       Brian Berliner
              Coder and designer of the  ccvvss  program  itself  in
              April,  1989,  based  on  the original work done by
              Dick.

       Jeff Polk
              Helped Brian with the design of the ccvvss module  and
              vendor  branch support and author of the cchheecckkiinn(11)
              shell script (the ancestor of `ccvvss iimmppoorrtt').

       And many others too numerous to mention here.

SSEEEE AALLSSOO
       The most comprehensive manual for CVS is  Version  Manage-
       ment  with CVS by Per Cederqvist et al.  Depending on your
       system, you may be able to get it with the iinnffoo  ccvvss  com-
       mand  or  it  may  be  available  as  cvs.ps (postscript),
       cvs.texinfo (texinfo source), or cvs.html.

       For CVS updates, more information on documentation,  soft-
       ware related to CVS, development of CVS, and more, see:
                 hhttttpp::////wwwwww..ccyycclliicc..ccoomm
                 hhttttpp::////wwwwww..lloorriiaa..ffrr//~~mmoollllii//ccvvss--iinnddeexx..hhttmmll

       ccii(11),  ccoo(11),  ccvvss(55),   ccvvssbbuugg(88),   ddiiffff(11),   ggrreepp(11),
       ppaattcchh(11), rrccss(11), rrccssddiiffff(11), rrccssmmeerrggee(11), rrlloogg(11).














                                                               28


